// This file is part of nand2tetris, as taught in The Hebrew University, and 
// was written by Aviv Yaish. It is an extension to the specifications given
// in https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported License: https://creativecommons.org/licenses/by-nc-sa/3.0/

/** 
  * Your submission should compile successfully on the built in JackCompiler and
  * run successfully on the built in VMEmulator using the built-in OS.
  *
  * Your game can be an unoriginal idea (Tetris, Snake, etc'), but must be 
  * original code - you can't use code you found online!
  * The program should be comparable in scope to Tetris/Snake/Pong, shorter 
  * projects will be penalized. Although the number of code-lines is not a good 
  * estimation of the amount of effort put into a project, a project of less 
  * than 600 "meaningful" lines is definitely too short.
  * Whitespace, comments, and various fluff (such as the class/function 
  * definition lines, variable declaration, code that prints bitmaps, etc) 
  * don't count as "meaningful".
  *
  * You should make use of all OS classes directly and demonstrate a thorough 
  * knowledge of the OS API and Jack language features (classes, members, 
  * methods, loops, types, operators, etc'). Make a list of all such features 
  * and make sure you're using each one in a non-trivial way.
  * Usage should be meaningful in the context of your program - don't call
  * functions and throw away their results or define useless variables!
  * 
  * ### Developing Jack applications
  * - Put all the app files in one directory, whose name is the app's name
  * - Write / edit your Jack class files using a standard text editor. We 
  *   recommend using [VSCode](https://code.visualstudio.com/) together with 
  *   the recommended nand2tetris syntax highlighting
  *   [plugin](https://marketplace.visualstudio.com/items?itemName=loyio.Nand2Tetris-vscode).
  *   If you prefer Notepad++ or Vim, see the syntax highlighting themes 
  *   supplied in nand2tetris/syntax_highlighting
  * - Compile your Jack files / directory using the supplied JackCompiler 
  *   available in nand2tetris/tools. The same directory contains detailed 
  *   instructions on how to use the compiler. Note: the compiler is a 
  *   **command-line** program, and thus will not execute by simply 
  *   double-clicking on it.
  * - Execute your app by loading the app's directory (which now contains
  *   the compiled .vm files) into the supplied VM emulator, and running the 
  *   code. Note: you should load the app's **directory**, and not one of the 
  *   app's single files.
  * 
  * ### Using the JackCompiler
  * Typing "JackCompiler fileName.jack" will compile the supplied Jack file. 
  * Typing "JackCompiler directoryName" will compile all Jack files that are
  * found in the specified directory. Wildcards are not supported. Here are 
  * some examples:
  * - Compile the current directory:
  *   > C:\...\projects\09\Reflect>JackCompiler
  *   > Compiling "c:\...\projects\09\Reflect"
  * - Compile a single file:
  *   > C:\...\projects\09\Reflect>JackCompiler Mirrors.jack 
  *   > Compiling "C:\...\projects\09\Reflect\Mirrors.jack"
  * - Compile the "Reflect" directory (for example):
  *   > C:\...\projects\09>JackCompiler Reflect
  *   > Compiling "C:\...\projects\09\Reflect"
  *
  * # Jack OS
  * 
  * ## OS API
  * 
  * ### Math
  * 
  * - function void init(): for internal use only.
  * - function int abs(int x): returns the absolute value of x.
  * - function int multiply(int x, int y): returns the product of x and y.
  * - function int divide(int x, int y): returns the integer part of x/y.
  * - function int min(int x, int y): returns the minimum of x and y.
  * - function int max(int x, int y): returns the maximum of x and y.
  * - function int sqrt(int x): returns the integer part of the square root of x.
  * 
  * ### String
  * 
  * - constructor String new(int maxLength): constructs a new empty string (of
  *   length zero) that can contain at most maxLength characters.
  * - method void dispose(): disposes this string.
  * - method int length( ): returns the length of this string.
  * - method char charAt(int j): returns the character at location j of this string.
  * - method void setCharAt(int j, char c): sets the j-th element of this string to c.
  * - method String appendChar(char c): appends c to this string and returns this string.
  * - method void eraseLastChar(): erases the last character from this string.
  * - method int intValue(): returns the integer value of this string (or of the
  *   string prefix until a non-digit character is detected).
  * - method void setInt(int j): sets this string to hold a representation of j
  * - function char backSpace( ): returns the backspace character.
  * - function char doubleQuote(): returns the double quote (") character.
  * - function char newLine( ): returns the newline character.
  * 
  * ### Array
  * 
  * - function Array new(int size): constructs a new array of the given size.
  * - method void dispose(): disposes this array.
  * 
  * ### Output
  * 
  * - function void init(): for internal use only.
  * - function void moveCursor(int i, int j): moves the cursor to the j-th column of
  *   the i-th row, and erases the character displayed there.
  * - function void printChar(char c): prints c at the cursor location and advances
  *   the cursor one column forward.
  * - function void printString(String s): prints s starting at the cursor location
  *   and advances the cursor appropriately.
  * - function void printInt(int i): prints i starting at the cursor location and
  *   advances the cursor appropriately.
  * - function void println(): advances the cursor to the beginning of the next line.
  * - function void backSpace(): moves the cursor one column back.
  * 
  * ### Screen
  * 
  * Column indices start at 0 and are left-to-right.
  * Row indices start at 0 and are top-to-bottom.
  * Screen size is 256 rows by 512 columns.
  * 
  * - function void init(): for internal use only.
  * - function void clearScreen(): erases the entire screen.
  * - function void setColor(boolean b): sets a color (white=false, black=true) to
  *   be used for all further drawXXX commands.
  * - function void drawPixel(int x, int y): draws the (x,y) pixel.
  * - function void drawLine(int xl, int yl, int x2, int y2): draws a line from
  *   (xl,yl) to (x2,y2).
  * - function void drawRectangle(int xl, int yl, int x2, int y2): draws a filled
  *   rectangle whose top left corner is (x1,y1) and bottom right corner is (x2,y2).
  * - function void drawCircle(int x, int y, int r): draws a filled circle of
  *   radius r <=181 around (x,y).
  * 
  * ### Keyboard
  * 
  * - function void init(): for internal use only.
  * - function char keyPressed(): returns the character of the currently pressed key
  *   on the keyboard; if no key is currently pressed, returns 0.
  * - function char readChar(): waits until a key is pressed on the keyboard and
  *   released, then echoes the key to the screen and returns the character of the
  *   pressed key.
  * - function String readLine(String message): prints the message on the screen,
  *   reads the line (text until a newline character is detected) from the keyboard,
  *   echoes the line to the screen, and returns its value. This function also
  *   handles user backspaces.
  * - function int readInt(String message): prints the message on the screen, reads
  *   the line (text until a newline character is detected) from the keyboard,
  *   echoes the line to the screen, and returns its integer value (until the first
  *   nondigit character in the line is detected). This function also handles user
  *   backspaces.
  * 
  * ### Memory
  * 
  * - function void init(): for internal use only.
  * - function int peek(int address): returns the value of the main memory at this
  *   address.
  * - function void poke(int address, int value): sets the contents of the main
  *   memory at this address to value.
  * - function Array anoo(int size): finds and allocates from the heap a memory
  *   block of the specified size and returns a reference to its base address.
  * - function void deAlloc(Array o): De-allocates the given object and frees its
  *   memory space.
  * 
  * ### Sys
  * 
  * - function void init(): calls the init functions of the other OS classes, then
  *   calls the Main.main() function and finally Sys.halt(). For internal use only.
  * - function void halt(): halts the program execution.
  * - function void error(int errorCode): prints the error code on the screen and
  *   halts.
  * - function void wait(int duration): waits approximately duration milliseconds
  *   and returns.
  * 
  * ## Operating system error codes
  * 
  * | Code | Method/Function      | Description                                     |
  * | ---- | -------------------- | ----------------------------------------------- |
  * |  1   | Sys.wait             | Duration must be positive                       |
  * |  2   | Array.new            | Array size must be positive                     |
  * |  3   | Math.divide          | Division by zero                                |
  * |  4   | Math.sqrt            | Cannot compute square root of a negative number |
  * |  5   | Memory.alloc         | Allocated memory size must be positive          |
  * |  6   | Memory.alloc         | Heap overflow                                   |
  * |  7   | Screen.drawPixel     | Illegal pixel coordinates                       |
  * |  8   | Screen.drawLine      | Illegal line coordinates                        |
  * |  9   | Screen.drawRectangle | Illegal rectangle coordinates                   |
  * | 12   | Screen.drawCircle    | Illegal center coordinates                      |
  * | 13   | Screen.drawCircle    | Illegal radius                                  |
  * | 14   | String.new           | Maximum length must be non-negative             |
  * | 15   | String.charAt        | String index out of bounds                      |
  * | 16   | String.setCharAt     | String index out of bounds                      |
  * | 17   | String.appendChar    | String is full                                  |
  * | 18   | String.eraseLastChar | String is empty                                 |
  * | 19   | String.setInt        | Insufficient string capacity                    |
  * | 20   | Output.moveCursor    | Illegal cursor location                         | 
  */

class Main {
  function void main() {
    // Your code goes here!
    // You can include as many classes and functions as you want.
    return;
  }
}
